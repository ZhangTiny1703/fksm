<?xml version="1.0" encoding="UTF-8"?>
<!-- http://blog.csdn.net/claram/article/details/48066395 -->
<!--
scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒当scan为true时，此属性生效。默认的时间间隔为1分钟。
debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
-->
<configuration scan="true" scanPeriod="60 seconds" debug="false">

	<!-- 配置log文件的目录 -->
	<!-- value都配置成/data/logs/[具体业务名称] 例如下面-->
	<property name="LOG_PATH" value="/var/log" />
	<property name="ROLLING_LOG_PATH" value="/data/flume/log" />
	<property name="LOG_CHARSET" value="UTF-8" />
	<property name="APP_NAME" value="myApp" />

	<!-- console的appender -->
	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
		<!--
        日志输出格式：%d表示日期时间，%thread表示线程名，%-5level：级别从左显示5个字符宽度
        %logger{50} 表示logger名字最长50个字符，否则按照句点分割。 %msg：日志消息，%n是换行符
        -->
		<layout class="ch.qos.logback.classic.PatternLayout">
			<Pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level[%t]\(%file:%L\) %msg%n</Pattern>
		</layout>
	</appender>

	<!-- root打到这里 -->
	<!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 -->
	<appender name="appAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${LOG_PATH}/${APP_NAME}.log</file>
		<append>true</append>
		<!--
        当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名
        TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动。
        -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!--
            滚动时产生的文件的存放位置及文件名称 %d{yyyy-MM-dd}：按天进行日志滚动
            %i：当文件大小超过maxFileSize时，按照i进行文件滚动
            -->
			<fileNamePattern>${ROLLING_LOG_PATH}/${APP_NAME}-%d{yyyy-MM-dd-HH-mm-ss}-%i.log</fileNamePattern>
			<timeBasedFileNamingAndTriggeringPolicy
					class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<!-- or whenever the file size reaches 50MB -->
				<maxFileSize>50MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
			<!--
            可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。假设设置每天滚动，
            且maxHistory是365，则只保存最近365天的文件，删除之前的旧文件。注意，删除旧文件是，
            那些为了归档而创建的目录也会被删除。
            -->
			<maxHistory>30</maxHistory>
		</rollingPolicy>
		<!-- 日志文件格式 -->
		<encoder>
			<!-- 业务分析log格式，所有业务分析使用的格式，都是这个格式，一般对应的logger都是warn或者error -->
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level[%t]\(%file:%L\) %msg%n</pattern>
			<charset>${LOG_CHARSET}</charset>
		</encoder>
	</appender>
	<!--
    root与logger是父子关系，没有特别定义则默认为root，任何一个类只会和一个logger对应，
    要么是定义的logger，要么是root，判断的关键在于找到这个logger，然后判断这个logger的appender和level。
    -->
	<root level="INFO,DEBUG,ERROR">
		<appender-ref ref="STDOUT" />
		<appender-ref ref="appAppender" />
	</root>
</configuration>